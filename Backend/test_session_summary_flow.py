"""
Test script to verify session summary generation, storage, and retrieval flow.
"""
import asyncio
import sys
import os
import json

# Add the Backend directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__)))

from service.script_pipeline_service import ScriptPipelineService
from service.data_parser_service import DataParserService
from service.quarter_service import QuarterService
from models.quarter import Quarter
from models.user import User


async def test_session_summary_flow():
    """Test the complete flow of session summary generation and storage."""
    
    print("üß™ Testing session summary flow...")
    
    # Test data - a sample transcript
    test_transcript = """
    Meeting Summary:
    Today we discussed Q4 goals and priorities. Key outcomes:
    - Completed migration project ahead of schedule
    - New product launch planned for December
    - Team expansion approved for next quarter
    - Budget review shows 15% savings this quarter
    
    Action items assigned to team members for follow-up.
    """
    
    # Initialize services
    pipeline_service = ScriptPipelineService()
    data_parser_service = DataParserService()
    quarter_service = QuarterService()
    
    # Step 1: Test pipeline generation
    print("\n1Ô∏è‚É£ Testing pipeline summary generation...")
    try:
        pipeline_response = await pipeline_service.process_transcript(test_transcript)
        
        # Check if session_summary is generated
        session_summary = pipeline_response.get("session_summary")
        if session_summary:
            print(f"‚úÖ Session summary generated: {session_summary[:100]}...")
        else:
            print("‚ùå No session summary generated by pipeline")
            return
            
    except Exception as e:
        print(f"‚ùå Pipeline processing failed: {str(e)}")
        return
    
    # Step 2: Create a test quarter
    print("\n2Ô∏è‚É£ Creating test quarter...")
    try:
        test_quarter = Quarter(
            quarter_name="Q4 2024 Test",
            quarter_number=4,
            year=2024,
            start_date="2024-10-01",
            end_date="2024-12-31",
            created_by="test_user"
        )
        
        quarter_id = await quarter_service.create_quarter(test_quarter)
        print(f"‚úÖ Test quarter created with ID: {quarter_id}")
        
    except Exception as e:
        print(f"‚ùå Quarter creation failed: {str(e)}")
        return
    
    # Step 3: Test data parsing and storage
    print("\n3Ô∏è‚É£ Testing data parsing and session summary storage...")
    try:
        # Parse and save with the quarter_id
        results = await data_parser_service.parse_and_save(
            pipeline_response, 
            file_prefix="test_meeting",
            quarter_id=quarter_id
        )
        print(f"‚úÖ Data parsed and saved: {len(results)} collections created")
        
    except Exception as e:
        print(f"‚ùå Data parsing/saving failed: {str(e)}")
        return
    
    # Step 4: Verify session summary is stored in quarter
    print("\n4Ô∏è‚É£ Verifying session summary storage...")
    try:
        updated_quarter = await quarter_service.get_quarter_by_id(quarter_id)
        
        if updated_quarter and hasattr(updated_quarter, 'session_summary') and updated_quarter.session_summary:
            print(f"‚úÖ Session summary stored in quarter: {updated_quarter.session_summary[:100]}...")
        else:
            print("‚ùå Session summary not found in quarter")
            
    except Exception as e:
        print(f"‚ùå Quarter retrieval failed: {str(e)}")
        return
    
    # Step 5: Test API endpoint for session summary
    print("\n5Ô∏è‚É£ Testing session summary API accessibility...")
    try:
        # Test the quarter retrieval that would be used by frontend
        quarter_data = await quarter_service.get_quarter_by_id(quarter_id)
        
        if quarter_data and hasattr(quarter_data, 'session_summary'):
            print("‚úÖ Session summary accessible via quarter service")
            print(f"   Summary: {quarter_data.session_summary[:100] if quarter_data.session_summary else 'None'}...")
        else:
            print("‚ùå Session summary not accessible via quarter service")
            
    except Exception as e:
        print(f"‚ùå API accessibility test failed: {str(e)}")
    
    # Cleanup
    print("\nüßπ Cleaning up test data...")
    try:
        await quarter_service.delete_quarter(quarter_id)
        print("‚úÖ Test quarter deleted")
    except Exception as e:
        print(f"‚ö†Ô∏è Cleanup warning: {str(e)}")
    
    print("\nüéâ Session summary flow test completed!")


if __name__ == "__main__":
    asyncio.run(test_session_summary_flow())
